package com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.jetty.tests;

import java.net.URI;
import java.util.concurrent.TimeUnit;


import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.uchump.prime.Metatron.Lib._HTTP._Jetty.server.Server;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.server.ServerConnector;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.servlet.ServletContextHandler;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.api.Session;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.api.StatusCode;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.api.WebSocketConnectionListener;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.jetty.client.WebSocketClient;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.jetty.server.JettyWebSocketServerContainer;
import com.uchump.prime.Metatron.Lib._HTTP._Jetty.websocket.jetty.server.config.JettyWebSocketServletContainerInitializer;

import static com.uchump.prime.Metatron.Lib._Hamcrest.MatcherAssert.assertThat;
import static com.uchump.prime.Metatron.Lib._Hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class CloseInOnOpenTest
{
    private Server server;
    private ServerConnector connector;
    private JettyWebSocketServerContainer serverContainer;
    private WebSocketClient client;

    @BeforeEach
    public void beforeEach() throws Exception
    {
        server = new Server();

        connector = new ServerConnector(server);
        server.addConnector(connector);

        ServletContextHandler context = new ServletContextHandler();
        context.setContextPath("/");
        server.setHandler(context);

        JettyWebSocketServletContainerInitializer.configure(context, (servletContext, wsContainer) ->
            wsContainer.addMapping("/ws", (req, resp) -> new ClosingListener()));
        server.start();

        serverContainer = JettyWebSocketServerContainer.getContainer(context.getServletContext());
        assertNotNull(serverContainer);

        client = new WebSocketClient();
        client.start();
    }

    @AfterEach
    public void afterEach() throws Exception
    {
        client.stop();
        server.stop();
    }

    @Test
    public void testCloseInOnWebSocketConnect() throws Exception
    {
        URI uri = URI.create("ws://localhost:" + connector.getLocalPort() + "/ws");
        EventSocket clientEndpoint = new EventSocket();

        client.connect(clientEndpoint, uri).get(5, TimeUnit.SECONDS);
        assertTrue(clientEndpoint.closeLatch.await(5, TimeUnit.SECONDS));
        assertThat(clientEndpoint.closeCode, is(StatusCode.POLICY_VIOLATION));

        assertThat(serverContainer.getOpenSessions().size(), is(0));
    }

    public static class ClosingListener implements WebSocketConnectionListener
    {
        @Override
        public void onWebSocketConnect(Session session)
        {
            session.close(StatusCode.POLICY_VIOLATION, "I am a WS that closes immediately");
        }
    }
}